* 자바의 입출력
    I/O란 Input Output의 약자로 입출력이라고 한다.
    입출력은 컴퓨터 내부 또는 외부의 장치와 프로그램간의 데이터를 주고받는 것을 말한다.
    자바 입출력은 어느 한쪽에서 다른 쪽으로 데이터를 전달하려면, 두 대상을 연결하고 데이터를 전송할 수 있는 무언가가 필요한데 이것을 스트림 이라고 정의한다.
    자바의 steam과는 다른 개념이다.


* 입출력 스트림
    자바의 입출력에서 스트림이란 데이터를 운반하는데 사용되는 연결통로이다.
    스트림은 종류가 많고 달라도 읽고 쓰는 방법은 통일하다. 각 예제를 통해 확인해보기
        1. 스트림은 단방향통신만 가능하다. -> 하나의 스트림으로 입출력 동시에 처리할 수 없다.
        2. 입력스트림, 출력스트림 필요
        3. FIFO 구조

* 보조 스트림
    스트림의 기능을 보완하기 위한 보조스트림이다.
    보조스트림은 실제 데이터를 주고받는 스트림이 아니기 때문에 데이터를 입출력할 수 있는 기능은 없지만, 스트림의 기능을 향상시키거나 새로운 기능을 추가할 수 있다.
    그래서 스트림을 먼저 생성한 다음에 보조스트림을 생성해야한다. 단독 x
        ex) .txt파일을 읽기 위해 FileInputStream을 사용할 때, 입력 성능을 향상시키기 위해 버퍼를 사용하는 버퍼스트림 BufferedInputStream
            // 기반 스트림 생성
            FileInputStream fis = new FileInputStream("test.txt");

            // 기반스트림을 이용해서 보조스트림 생성
            BufferedInputStream bis = new BufferedInputStream(fis);

            bis.read() // 보조스트림인 BufferedInputStream으로부터 데이터를 읽는다

    보조스트림인 BufferedInputStream이 입력기능을 수행하는 것이 아니라 실제 입력기능은 BufferedInputStream과 연결된 FileInputStream이
    수행하고, 보조스트림인 BufferedInputStream은 버퍼만을 제공한다.
    * 결국 모든 보조스트림은 InputStream, OutputStream의 자손들이다.

* 문자 기반 스트림
    바이트기반이라 함은 입출력의 단위가 1 byte라는 뜻이다.
    Java에서는 한 문자를 의미하는 char형이 1 byte가 아니라 2 byte이기 때문에 바이트기반의 스트림으로 처리하는데는 어려움이 있다.
    문자데이터를 입출력할 때는 문자기반 스트림을 사용
    InputStream -> Reader

    OutputStream -> Writer

* 바이트기반 스트림
   InputStream (메서드 한번보기 874p)
   OutputStream (메서드 한번보기 874p)
   이 모든 바이트기반의 스트림의 조상이다
   프로그램이 종료될 때, 사용하고 닫지 않은 스트림을 JVM이 자동적으로 닫아 주기는 하지만, 스트림을 사용해서 모든 작업을 마치고 난 후에는 close()를 호출해서
   반드시 닫아 주어야한다.

* 파일 입출력 스트림
   FileInputStream, FileOutputStream
   문자기반의 스트림 : FileReader, FileWriter -> 텍스트파일 다루는 경우






