* 자바의 입출력
    I/O란 Input Output의 약자로 입출력이라고 한다.
    입출력은 컴퓨터 내부 또는 외부의 장치와 프로그램간의 데이터를 주고받는 것을 말한다.
    자바 입출력은 어느 한쪽에서 다른 쪽으로 데이터를 전달하려면, 두 대상을 연결하고 데이터를 전송할 수 있는 무언가가 필요한데 이것을 스트림 이라고 정의한다.
    자바의 steam과는 다른 개념이다.


* 입출력 스트림
    자바의 입출력에서 스트림이란 데이터를 운반하는데 사용되는 연결통로이다.
    스트림은 종류가 많고 달라도 읽고 쓰는 방법은 통일하다. 각 예제를 통해 확인해보기
        1. 스트림은 단방향통신만 가능하다. -> 하나의 스트림으로 입출력 동시에 처리할 수 없다.
        2. 입력스트림, 출력스트림 필요
        3. FIFO 구조

* 보조 스트림
    스트림의 기능을 보완하기 위한 보조스트림이다.
    보조스트림은 실제 데이터를 주고받는 스트림이 아니기 때문에 데이터를 입출력할 수 있는 기능은 없지만, 스트림의 기능을 향상시키거나 새로운 기능을 추가할 수 있다.
    그래서 스트림을 먼저 생성한 다음에 보조스트림을 생성해야한다. 단독 x
        ex) .txt파일을 읽기 위해 FileInputStream을 사용할 때, 입력 성능을 향상시키기 위해 버퍼를 사용하는 버퍼스트림 BufferedInputStream
            // 기반 스트림 생성
            FileInputStream fis = new FileInputStream("test.txt");

            // 기반스트림을 이용해서 보조스트림 생성
            BufferedInputStream bis = new BufferedInputStream(fis);

            bis.read() // 보조스트림인 BufferedInputStream으로부터 데이터를 읽는다

    보조스트림인 BufferedInputStream이 입력기능을 수행하는 것이 아니라 실제 입력기능은 BufferedInputStream과 연결된 FileInputStream이
    수행하고, 보조스트림인 BufferedInputStream은 버퍼만을 제공한다.
    * 결국 모든 보조스트림은 InputStream, OutputStream의 자손들이다.

* 문자 기반 스트림
    바이트기반이라 함은 입출력의 단위가 1 byte라는 뜻이다.
    Java에서는 한 문자를 의미하는 char형이 1 byte가 아니라 2 byte이기 때문에 바이트기반의 스트림으로 처리하는데는 어려움이 있다.
    문자데이터를 입출력할 때는 문자기반 스트림을 사용
    InputStream -> Reader

    OutputStream -> Writer

* 바이트기반 스트림
   InputStream (메서드 한번보기 874p)
   OutputStream (메서드 한번보기 874p)
   이 모든 바이트기반의 스트림의 조상이다
   프로그램이 종료될 때, 사용하고 닫지 않은 스트림을 JVM이 자동적으로 닫아 주기는 하지만, 스트림을 사용해서 모든 작업을 마치고 난 후에는 close()를 호출해서
   반드시 닫아 주어야한다.

* 파일 입출력 스트림
   FileInputStream, FileOutputStream
   문자기반의 스트림 : FileReader, FileWriter -> 텍스트파일 다루는 경우

* 바이트기반의 보조 스트림

   FilterInputStream/FilterOutputStream

       FilterInputStream, FilterOutputStream은 InputStream, OutputStream의 자손이면서 모든 보조스트림의 조상이다.
       즉, 바이트기반의 모든 보조 스트림은 InputStream/OutputStream의 상속을 FilterInputStream/FilterOutputStream이 받아서 오버라딩되고
       FilterInputStream/FilterOutputStream을 상속받아서 기반스트림에 보조기능을 추가한 보조스트림을 사용하는 것이다.


       FilterInputStream의 자손 : BufferedInputStream, DataInputStream, PushbackInputStream 등
       FilterOutputStream의 자손 : BufferedOutputStream, DataOutputStream, PrintStream 등

       보조스트림은 자체적으로 입출력을 수행할 수 없끼 때문에 기반스트림을 필요로 한다.

   BufferedInputStream/BufferedOutputStream

       BufferedInputStream/BufferedOutputStream은 스트림의 입출력 효율을 높이기 위해 버퍼를 사용하는 보조스트림이다.
       한 바이트씩 입출력을하는 것 보다는 버퍼를 이용해서 한 번에 여러 바이트를 입출력하는 것이 빠르기 때문에 대부분의 입출력 작업에 사용된다.
        ->  버퍼의 크기를 지정해주지 않으면 기본적으로 8192byte 크기의 버퍼를 갖게 된다. 외부의 입력소르로 부터 읽는 것보다 내부의 버퍼로 부터 일근 것이 훨씬
            빠르기 때문에 지정해주는 것이 작업 효율에 좋다

       버퍼가 가득 찼을 때만 출력소스에 출력을 하기 때문에, 마지막 출력부분이 출력소스에 쓰이지 못하고 버퍼에 남아있는 채로 종료될 수 있다.
       그래서 close()를 호출해서 마지막에 버퍼에 있는 모든 내용이 출력소스에 출력되도록 해야 한다.
       기반스트림의 close()를 호출해서 닫아도 남아있던 모든 내용이 출력되지 않는다.
       보조스트림을 사용한 경우에는 기반스트림의 close()를 호출할 필요 없이 보조스트림의 close()를 호출하기만 하면 된다.
        -> 보조스트림의 조상인 FilterInputStream/FilterOutputStream가 결국 기반스트림의 close()를 호출 하고
           보조스트림은 조상스트림의 close()를 오버라이딩없이 그대로 상속받아 사용한다.

* 문자기반 스트림

      바이트기반 스트림의 조상이 InputStream/OutputStream인 것과 같이 문자기반의 스트림에서는
      Reader/Writer가 그와 같은 역할을 한다. 메서드는 비슷하고 byte배열 대신 char배열을 상용한다는 것 외에는 별반 바르지 않다.

      문자기반 스트림이라는 것이 단순히 2 byte로 스트림을 처리하는 것만을 의미하지는 않는다는 것이다.
      문자 데이터를 다루는데 필요한 또 하나의 정보는 인코딩이다.
      문자기반 스트림, 즉 Reader/Writer 그리고 그 자손들은 여러 종류의 인코딩과 자바에서 사용하는 유니코드(UTF-16)간의 변환을 자동적으로 처리해준다.
      Reader는 특정 인코딩을 읽어서 유니코드로 변환하고 Writer는 유니코드를 특정 인코딩으로 변환하여 저장한다.

   StringReader/StringWriter

      StringReader/StringWriter는 CharArrayReader/CharArrayWriter와 같이 입출력 대상이 메모리인 스트림이다.
      StringWriter에 출력되는 데이터는 내부의 StringBuffer에 저장되며

      StringBuffer getBuffer() : StringWriter에 출력한 데이터가 저장된 StringBuffer를 반환한다.
      String toString() : StringWriter에 출력된 (StringBuffer에 저장된) 문자열을 반환한다

* 문자기반의 보조스트림

   BufferedReader/BufferedWriter

      BufferedReader/BufferedWriter는 버퍼를 이용하여 입출력의 효율을 높일 수 있도록 해주는 역할
      BufferedReader의 readLine()을 사용하여 라인단위로 읽는다.

   InputStreamReader/OutputStreamWriter

      InputStreamReader/OutputStreamWriter는 바이트 기반의 스트림을 문자기반 스트림으로 연결시켜주는 역할을 한다.
      그리고 바이트기반 스트림의 데이터를 지정된 인코딩의 문자데이터 변환하는 작업을 수행한다

      InputStreamReader(InputStream in) : OS에서 사용하는 기반 인코딩을 사용
      InputStreamReader(InputStream in, String encoding) 지정된 인코딩 사용하여 InputStreamReader생성
      OutputStreamWriter도 동일

        -> 참고 : 기본 OS에서 사용하는 인코딩의 종류 알기
            Properties prop = System.getProperties();
            sout(prop.get("sun.jnu.encoding"));

