* 스트림(stream)
    스트림 출현 이유 : 데이터를 얻기위해 for문 Iterator등을 이용해 코드 작성해왔다. 코드는 길어지고 재사용성도 떨어진다. 또, 데이터 소스마다
    다루는 방식이 다르기 때문에 이러한 문제를 해결하기위해 나왔다.
    스트림은 데이터 소스를 추상화하고 데이터를 다루는데 자주 사용되는 메서드를 정의해 놓았다.
    데이터 추상화는 데이터 소스가 무엇이던 간에 같은 방식으로 다룰 수 있게 되었다는 것과 코드의 재사용성이 높아진다는 것을 의미한다
    특징
    1. 스트림은 데이터 소스를 변경하지 않는다.
        스트림은 데이터 소스로 부터 데이터를 읽기만할 뿐, 데이터 소스를 변경하지 않는다. 필요하다면 정렬된 결과를 반환할 수도 있다.

    2. 스트림은 일회용이다.
        스트림은 Iterator처럼 컬렉션 요소를 모두 읽고 나면 다시 사용할 수 없다. 필요하다면 다시 생성해야 한다.

    3. 스트림은 작업을 내부 반복으로 처리한다.
        스트림을 이용한 작업이 간절할 수 있는 비결중의 하나가 바로 '내부 반복' 이다.
        내부 반복이라는 것은 반복문을 메서드의 내부에 숨길 수 있다는 것을 의미한다.
        forEach()는 스트림에 정의된 메서드 중의 하나로 매개변수에 대입된 람다식을 데이터 소스의 모든 요소에 적용한다.
        즉, forEach()는 메서드 안으로 for문을 넣는 것이다.

* 스트림 연산
    스트림 연산은 중간 연산,최종 연산 으로 나뉜다.
        중간 연산 : 연산 결과가 스트림인 연산 계속 연산 가능 (    stream.limit(5).sorted()..    )
        최종 연산 : 연산 결과가 스트림이 아닌 연산. 스트림의 요소를 소모하므로 단 한번만 가능 ( stream.limit(5).sorted().forEach(System.out::println) )

        중간 연산 : map(), flatMap()
        최종 연산 : reduce(), collect()

* 병렬 스트림
    스트림으로 데이터를 다룰 때의 장점 중 하나가 바로 병렬 처리가 쉽다는 것이다. 병렬 스트림은 내부적으로 fork&join 프레임웍을 이용해서 병렬 수행한다.
    parallel() 메서드 호출하면 된다.

* 스트림 만들기
    Colleciont에 stream()이 정의되어 있다.
    그래서 List, Set을 구현한 클래스들은 스트림 생성 가능
    Stream<T> Collection.stream()
    ex)
    List<Integer> list = Arrays.asList(1,2,3,4,5);
    Stream<Integer> intStream = list.stream();


